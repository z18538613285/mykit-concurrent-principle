package io.gushizhao.basecase.lab05;

/**
 * @Author huzhichao
 * @Description TODO
 * @Date 2023/3/24 9:21
 *
 * 并发问题的“幕后黑手”
 * 源头三，编译优化带来的有序性问题
 * 有序性是指程序按照代码的既定顺序执行
 *
 * 编译器或者解释器为了优化程序的执行性能，有时会改变程序的执行顺序。但是，编译器或者解释器对程序的执行顺序进行修
 * 改，可能会导致意想不到的问题！
 *
 *在Java程序中，一个经典的案例就是使用双重检查机制来创建单例对象。
 * 1.分配内存空间。
 * 2.初始化对象。
 * 3.将instance引用指向内存空间。
 * 正常执行的CPU指令顺序为1—>2—>3，CPU对程序进行重排序后的执行顺序可能为1—>3—>2。此时，就会出现问题。
 *
 *
 * 可以总结出如下问题的根源。
 * 缓存带来了可见性问题。
 * 线程切换带来了原子性问题。
 * 编译优化带来了有序性问题。
 *
 */
public class TestThread03 {


}
